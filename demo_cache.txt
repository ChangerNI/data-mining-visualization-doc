摘要
二十一世纪后，互联网行业的高速发展，正在慢慢改变人们的日常生活，衣食住行无不和互联网行业有着千丝万缕的联系。越来越多的互联网技术被运用在人们的日常生活中，诸如：人工智能、云计算、大数据、机器学习等等。为了加快提升人们的生活质量，我国正在大力推动智慧城市建设。旨在通过物联网和新一代互联网技术，结合新一代的创新思想，对社会的民生、治安、医疗、公共服务等作出智能的应答。基于目前已经相对成熟的智慧政务、智慧交通、智慧医疗和智慧旅游等项目的建设，本文主要研究以农产品为主要研究对象的产品流通和可视化及数据挖掘，从而搭建一个应用平台来便利民生。
通过市场的调研，了解了目前农产品的需求度和各个菜市场对农产品规范化的空缺，制定了合适的需求模型和设计方案：采用B/S架构；基于Spring、SpringMVC、Mybatis框架并利用Java8、Druid、Lombok、Logback、WebSocket、Maven等技术搭建服务端；基于React框架并利用Javascript、bootstrap、axios、Ant Design、 Echarts、npm等技术搭建用户端；基于ECharts进行大数据的可视化模块设计；基于二次指数平滑算法进行数据预测的实现；利用Tomcat和MySQL进行用户端和服务端的整合。

关键词
大数据；数据挖掘；预测分析；智慧城市；可视化平台

课题的背景
“买菜”这一动作行为可以说是生活中我们每个人都会遇见的，每一个人都将会长大，承担家庭的责任。那么，为自己的家人做一顿可口的饭菜就免不了买菜。但是，随着生活水平的提高，反而越来越多的人对于买菜没有任何经验。他们吃惯了美味的外卖，就连水果，也是帮你切好，外卖到家，完全不知道现在蔬菜水果的价格行情。这就让有些卖菜商人们有机可乘：一味地抬高菜价，坐地起价，以次充好。这极大影响了广大市民们的生活水平和质量。
其次，一方面，生活在一线城市的人们的时间都是很宝贵的，他们工作压力大，为节省买菜时间，他们从不议价；另一方面，很多刚刚进入社会的小年轻们，从小享受着父母的宠爱，他们也不会议价。这就造成了目前市场鱼龙混杂，农产品价格不公开化透明化的问题。
于是，本文所描述的农产品的流通可视化应用平台也就应运而生。它不仅可以提供给市民们公正透明公开的菜场价格，还能让国家清楚的知道我国人民对各类农产品的需求，便于国家大局的规划；同时，他也能让菜农们了解现在市场最需要什么，让他们耕耘有方，不再滞销浪费。

现状的分析
“物价高”已经是我国的十大社会问题之一。价格上涨与食品安全和房价密切相关。令人惊讶的是物价高当然不仅仅是价格的上涨。当下媒体广泛报道的“卖菜难、买菜贵”也是价格上涨的问题。政府对房价调整的控制力不高，但对一般农副产品的监管力度相当强大，但由于它太强大，到最后，生活在底层的老百姓们就成了最大的受害者。一方面，农民烦恼“卖菜难”，另一方面，城市普通居民感到“买菜贵”。在价格上涨之后，买卖的不和谐声音必然是不可避免的问题。那么，我们为什么不去打造一个平台，让市场中的菜价透明化公正化规范化，每一种农副产品的价格都能追溯它的源头，真正的解决好买卖农副产品双方的主要矛盾，有利于提高市场自我管理的能力。同时，该平台既解决了菜农们农副产品的滞销，也有效解决了买菜市民对菜品价格和质量的抱怨。
其次，国家目前对智慧城市的建设如火如荼，其中在公共交通、公共资源、医疗、政务、旅游等行业已经逐渐成熟，但是在农产品这方面还未见其雏形，所以，这一行业的市场空缺很大，值得去研究开发一个智慧农产品平台——产品流通可视化和数据挖掘应用平台。

产品流通的可视化表达与数据挖掘应用平台的优势
柴米油盐酱醋茶，这些都与菜市场有着密不可分的关系。作为城市公共配套设施，菜市场关系着千家万户的菜篮子，是民生所系、政府之责、公共服务必需。买菜方不方便，菜价便不便宜，菜品安不安全，与每个人的日常生活息息相关，直接影响着人们的幸福指数。对于本平台的优势主要体现在以下五个方面：
（1）实时价格显示：减少了菜农和买菜市民之间还价时间，便于规范市场价格规范，避免了市民买菜贵的现象；
（2）单一农副产品价格查询：用户买菜前可以先在平台上了解菜品的历史价格，防止出现农副产品价格溢价的情况；
（3）所需农副产品未来七天价格预测：帮助买菜市民们了解未来的价格趋势，同时也能让菜农们知道未来该种植什么作物能带来更多的收益；
（4）推动我国的智慧城市建设发展，为我国智慧城市建设带来多元化发展；
（5）适当解决我国的某些社会民生问题，促进我国的社会经济的发展。
本论文结构



React
React的速度很快，与其他框架相比，React框架采取了一种特立独行的操作DOM的方式。它并不直接对DOM进行操作，它引入了一个“虚拟DOM”的概念，并把它安插在JavaScript逻辑和实现DOM之间；这一概念有效地提高了Web的性能。在渲染的过程中，React通过在虚拟DOM中的微操作来实现对实际DOM的局部更新。其次，这一虚拟DOM的概念还帮我们解决了跨浏览器的兼容问题，他为我们提供了标准的API接口。
React能进行模块化管理，使用React可以对要实现的每一个功能进行模块化隔离，模块之间互不影响，在开发过程中进行Bug修复、单元测试都十分简单高效，有效地提高了代码的可维护性。

ECharts
ECharts这项技术对于目前的大数据可视化可以说是十分地重要，它支持多种图表的格式显示，具有丰富的可视化图标类型，包括：折线图、柱状图、饼图、地图、热点图、散点图等等。用户都能通过配置图表的属性来定制自己所需要的报表。而且ECharts的多种数据格式无需转换可以直接使用，通过后台的JSON数据返回，既能做到定时刷新，也能做到实时更新数据，这一特性对于本文所描述的“产品流通可视化和数据挖掘应用平台”具有很好的可利用性：进行千万数据的前端渲染展现，对开发这个大数据应用平台有着很大的帮助，极大地简化了大数据可视化的开发步骤，缩短了开发所需的时间。

npm
npm的全称叫做Node Package Manager，它是一款Node的包管理工具，目前Node.js已经集成了npm。npm对我们开发者来说最大的优点就是方便我们引入各种所需要的包（npm install XXX），npm还提供了一个重用其它开发者代码的方式，npm也能够分享开发者自己的代码，同事也提供了一个便捷的方式来来管理不同版本的代码。

axios
axios就是基于promise用于浏览器和node.js的http客户端。它的主要特点如下：
（1）从浏览器生成xmlhttpRequests
（2）从node.js发出HTTP请求
（3）支持Promise API
（4）拦截请求和响应
（5）转换请求和响应数据
（6）取消请求
（7）JSON数据的自动转换
（8）客户端支持防止XSRF
之所以我选择使用axios而不使用ajax请求，是因为本文所描述的应用平台在系统设计上就采用前后端分离技术，没有使用传统的MVC编程，ajax不符合现在前端MVVM的潮流，而且JQuery的整个项目太大，单纯使用ajax就要把整个JQuery全部引入，这显得非常不合理。而axios就比较小巧灵活，使用npm install axios就能安装使用，十分方便。

SSM
SSM框架的全称是Spring、SpringMVC和Mybatis。SSM框架是继SSH（Struts、Spring和Hibernate）之后目前市面上比较主流的Java EE企业级开发框架，适用于搭建各种中大型的企业级应用系统。当然，目前市面上还有一种框架——Spring Boot，但是Spring Boot作为一个微服务框架，距离微服务的实现还是存在一些距离的。这个框架只是为了提高开发效率，为了提高开发人员的生产力，对于Restful格式的URL请求还需要开发人员自行结合实际进行规范化工作。就框架的配套插件来说，SSM框架还是远远强于Spring Boot框架的，所以，本课题所研究开发的大数据应用平台还是决定使用SSM框架。

Spring的优点有很多，它可以很好地解决企业级大型项目的复杂性。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。 简单来说，Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。下面我就简单介绍几个Spring的特点：
（1）控制反转：
控制反转简称IOC，也叫依赖注入。在工厂模式下，对象由容器管理。您只需要在Spring配置文件中配置相应的bean，并设置相关的属性，这样Spring容器就可以生成类的实例对象和管理对象。当Spring容器启动时，Spring初始化配置文件中配置的所有bean，然后将那些已经初始化的bean分配给需要调用的类（假定类名为a），当需要调用它们时。分配方法是调用的setter方法来注入它们，而不是需要您在中更新这些bean。
（2）面向切面：
面向切面简称AOP，是Spring中另一个特点。首先，需要说明的是，AOP只是Spring的特征。与OOP一样，AOP是一种编程思想，而不是一种技术。AOP可以说是对OOP的补充和改进。OOP引入了封装、继承和多态的概念，建立了一个对象层次结构来模拟一组公共行为。当我们需要将公共行为引入分散的对象时，OOP似乎是无能为力的。也就是说，OOP允许您定义自上而下的关系，但它不适合定义从左到右的关系。例如，日志函数。日志代码倾向于水平地分布在所有对象级别，而不管其分布到的对象的核心功能是什么。在OOP设计中，会导致大量的代码重复，这不利于每个模块的重用。程序中的跨业务逻辑（如安全性、日志、事务等）被封装到一个方面，然后注入目标对象（特定的业务逻辑）。

SpringMVC框架是一个MVC框架，它通过实现模型-视图-控制器模式来分离数据、业务和表示。从这个角度来看，SpringMVC与Struts和Struts2非常相似。SpringMVC是围绕DispatcherServlet设计的，它负责将请求分派给特定的处理程序。请求通过可配置的处理程序映射（handler mappings）、视图解析（view resolution）、区域设置（locale）和主题解析（theme resolution）进行处理，并传输到相应的视图。
前端控制器（DisatcherServlet）:接收请求，响应结果，返回可以是json,String等数据类型，也可以是页面（Model）。
处理器映射器（HandlerMapping）:根据URL去查找处理器，一般通过xml配置或者注解进行查找。
处理器（Handler）：就是我们常说的controller控制器啦，由程序员编写。
处理器适配器（HandlerAdapter）:可以将处理器包装成适配器，这样就可以支持多种类型的处理器。
视图解析器（ViewResovler）:进行视图解析，返回view对象（常见的有JSP,FreeMark等）。
下面我就简单的描述一下SpringMVC的主要流程：
（1）用户发送请求到前端控制器（DispatcherServlet）。
（2）前端控制器请求处理器映射器（HandlerMapping）去查找处理器（Handler）。
（3）找到以后处理器映射器（HandlerMappering）向前端控制器返回执行链（HandlerExecutionChain）。
（4）前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）。
（5）处理器适配器去执行Handler。
（6）处理器执行完给处理器适配器返回ModelAndView。
（7）处理器适配器向前端控制器返回ModelAndView。
（8）前端控制器请求视图解析器（ViewResolver）去进行视图解析。
（9）视图解析器向前端控制器返回View。
（10）前端控制器对视图进行渲染。
（11）前端控制器向用户响应结果。

Mybatis相对于传统的数据库连接方式JDBC来说，具有很大的优越性和先进性。首先，Mybatis可以做到对SQL语句的统一管理，有专门的xml文件来配置数据库和SQL语句，根据查询所需要的参数进行动态的拼接SQL语句；而我们使用JDBC对数据库进行操作时，SQL查询语句分布在若干个Java类中，这样可读性和可维护性都比较差，代码不够规范，缺少模块化。其次，Mybatis可以对结果进行映射，你可以返回任意类型的数据，这个类型包括但不限于java类、list、map、tree等等。但是JDBC就表现的很不起眼，它仅仅返回一个ResultSet结果集，然后开发人员还要从这个ResultSet结果集中取出我们想要的结果并封装成所需要的类型。

Java8
对于本研究的课题，本人考虑了后期数据量会数百上千万的情况，为了让用户能有更好的软件使用体验和更优的软件流畅及稳定性。再加上目前市场Java8的环境逐渐成熟，出于综合考虑，本人决定使用Java8作为开发语言；下面，本人将阐述Java8的新特性在系统中的使用。
（1）Stream流
Java8中的流式处理在本应用系统平台中已经无处不在了，Java8的流式处理代替了此前版本的for循环，用简洁的语法，就能对集合进行操作。身为一个程序开发者，我们都知道编码中对集合进行操作处理是非常麻烦的：传统操作不仅需要大量的编码，操作效率还十分低下。但在Java8中我们可以通过流，它就像是一个SQL语句，你只要告诉它你需要什么，他就会返回给你什么结果，这极大提高了开发效率和开发质量。
（2）Lambda表达式
身为一个开发者，对于匿名内部类大家可能都不陌生，编码的简洁让越来越多的人喜欢上了它。千万不要以为这已经是最简单的，Java8就对匿名内部类进行了优化升级，甚至可以说是一次翻天地府的改版。无中生有，从无到有可以说是对Java8中的Lambda表达式的最简概括。
Lambda表达式格式：
(parameters) -> expression或(parameters) ->{statements;}
不管你写的方法需不需要参数或者这个方法需不需要返回值，用Lambda表达式编写你都能很好的解决，并且带来很好的可读性和可维护性，维护人员也不用再抓着头皮反复阅读他人编写的冗长代码。
（3）函数式编程
函数编程的最直接的表现，莫过于将函数作为数据自由传递，结合泛型推导能力，使代码表达能力获得飞一般的提升。Java8的函数式编程主要体现在以下三个方面：函数接口(Function)、流(Stream)和聚合器(Collector)。这几个方面在本文中我均已阐述，当然如果大家对这方面感兴趣，可以阅读我在文末的参考文献Java8实战一书，相信你会因此爱上Java8。
（4）Java8中的线程池
从Java线程创建、销毁和减去线程对于计算机资源来说是一项相对昂贵的任务。如果我们需要使用多线程来处理任务，频繁地创建和销毁线程，就会造成计算机资源的浪费，从而出现线程池技术。Java8中的ThreadPoolExecutor方法完美地提供了解决Java中多线程中的方法。本系统就是使用了这种方法，在该部分功能的具体实现中我会详细介绍，在此不再敖述。

Druid
数据库的连接建立和关闭是十分消耗服务器集群的内存和资源的，尤其是在大型项目中，数据库带来的资源浪费和消耗尤为明显。合理的控制数据库请求次数和数据库连接池的最大连接数对于开发者来说简直苦不堪言。这时候，使用阿里巴巴开源的Druid连接池就不存在这种问题，所有的设置只需要建立一个javax.sql.DataSource的实例就完全搞定。相比原来的JDBC，使用Druid不仅可以减少大量开发时间来配置连接池的相关设置，还能保证数据库的安全性，阿里巴巴Druid连接池仅支持通过特殊算法加密后的加密密码进行连接，对于软件安全的提升有很大帮助。

Lombok
Lombok可以说是另一个给程序员带来的福音，只要在IDE和项目中配置好Lombok，所有Javabean不用再编写构造函数方法、GetterAndSetter方法，也不用重写toString和hashcode的方法，节省开发时间用在业务逻辑层上，具体用法就是在Javabean中加入注解：@Setter、@Getter、@Log4j、@NoArgsConstructor和@AllArgsConstructor等，在项目编译的时候，自动在.class文件进行自动生成上述方法，极大简化了Javabean的代码量。但是要注意：使用此方法一定要保证Javabean中的所有变量全都符合CamelCase命名法，否则在编译时会发生错乱。

Logback
每一个开发工程师都希望自己设计的系统在无论多么恶劣的环境下，它的日志记录系统都能正常运行，以便于后期维护升级或者遇到Bug的时候能够有迹可循。Logback就可以很好的胜任这个工作，它相比较log4j有着更快的执行速度，还能对想要的日志进行过滤操作，节省了很大一部分的物理内存。本文所描述的应用平台详细地记录了每一次工作时，该平台出现的的所有异常和所有数据插入记录；根据日志，可以很快的知道哪一天因为应用平台的某种异常情况我们没有爬取新的数据，以便后期进行数据补充处理。

Websocket
想要实现一个系统的前后端实时通信，离不开Websocket。在本文所描述的应用平台，本人使用Spring自带的Websocket模块，SockJS。前端可以直接通过“HTTP://”为头的URL进行监听后端服务端口，使用Logback的过滤机制，把所需要的信息进行过滤操作，实时和前端进行交互。使用Websocket的优点主要有下：
（1）节省带宽。持续轮询服务器端数据的方法是使用HTTP协议。头部信息量大，有效数据比例低。然而，使用websocket，头部信息非常小，有效数据的比例很高。
（2）没有浪费。轮询方法可以轮询10次，只会遇到服务器数据更新，那么前9次都是白色轮询，因为没有更改任何数据。WebSocket由服务器主动发回，它所来自的只是新数据。
（3）实时性，考虑到服务器的压力，不可能用轮询方法进行短时间的间隔，否则服务器的压力太大，所以轮询时间间隔比较长，几秒钟，设置超过10秒。WebSocket由服务器推送，实时性能最高。

Maven
身为一个后端开发者，我已经不止一次地遇到这种情况：因为某些引入包的版本冲突所导致项目不能按照我们预期的结果进行运行。在没有使用Maven之前，我经常犯这样的错，包与包之间版本不一致导致报错或者同一类型的包被重复引用不同的版本导师编译失败。使用了Maven之后，这种问题完全不存在，完美适配目前这个提倡自动化配置、自动化发布的互联网时代。






非功能性需求
一个系统或者应用平台仅仅有着强大的功能和美观的界面并不足以称作是一个优秀的系统或应用平台。没有优良的用户人机交互体验、流畅的用户操作和系统或应用平台平稳的运行环境作为基础，系统和应用平台的优越性将会毫无体验，用户自然也不会对你的产品产生兴趣。目前软件免费化已是市场趋势，想要让自己开发的软件走入平常百姓家，系统和应用平台的优越性自然少不了，本应用平台就实现了以下非功能性需求：
（1）所有功能模块响应时间极短。虽然系统本身的数据量比较大，但是经过大数据技术本身的优越性和对数据库进行了缓存读写，查数时间可以缩短到3秒以内。
（2）视图层和逻辑层代码模块分离，互不干扰、互不影响，对后期的系统功能扩展和平台维护提供便利。
（3）数据分页操作，极大方便了用户查询的定位。
（4）Spring注解自动注入，简化配置，高效开发。
（5）数据单独存放，定时备份，避免了数据视图不存在。
（6）系统界面科技感强，操作简便，适合各个年龄段人群使用。

4.2.1   数据爬取
本系统所拥有的所有数据都是通过互联网对特定网站进行爬取获得，所使用的技术是比较基础的Java常用爬虫技术，具体原理如下图所示：
首先需要前期调研进行爬取网站选取，本文所描述系统的网站是由我的导师所提供的。确定了要爬取的网站之后就要先注册该网站的账号，为了防止该网站的反爬虫机制，需要将登录账号后的Cookie信息添加到HTTP请求的头部。接着就要对该网站的url进行不断请求解析，然后进行对所爬取html页面的正则匹配。只有符合我们要求的有效规范数据才会被存储在数据库中。因为数据量比较大，所以在这里使用了多线程并发存储数据。这样不仅保证了爬虫获取数据效率的高效，同时还能有效防止所登录Cookie信息的过期而导致数据获取失败。
4.2.2   产品未来价格预测分析
式中：St(2)——第t周期的二次指数平滑值；
St(1)——第t周期的一次指数平滑值；
St-1(2)——第t-1周期的二次指数平滑值；
a ——加权系数（也称为平滑系数）。
指数平滑法对实际序列具有平滑效果。加权系数（平滑系数）a越小，平滑效果越强，但对实际数据变化的响应越迟缓。在实时序列的线性变化部分，指数平滑值序列的滞后偏差程度随加权系数（平滑系数）a的增大而减小，但当时间序列的变化呈线性趋势时，使用第一个指数平滑方法进行预测时，仍然存在明显的滞后偏差。因此，也需要修改。修正后的方法也是在第一次指数平滑和第二次指数平滑的基础上，利用滞后偏差规律找出曲线的发展方向和趋势，建立线性趋势预测模型，使生成的预测数据更准确、更客观。
4.2.3   大数据汇总
百度开发的ECharts（Enterprise Charts）拥有诸多特性：它提供了丰富的可视化图标类型：柱状图、折线图、散点图、饼图等自定义个性化图表和混合图表；能满足用户动态数据实时传输；前端渲染的效果可以自定义展示；最主要的是兼容当前所有主流浏览器，这一特性将很好地满足本系统在前期运营的大力推广，用户不用额外安装任何软件，只需要一个域名就可以在任何地方访问，方便用户在买菜时实时比对商品价格，对本系统无疑是锦上添花。
4.2.4   商品查询
对于本系统的查询功能，在刚开始的需求设计仅仅考虑了每个查询接口的具体设计，但在实际开发中发现这样操作的话最后的接口数目会超过100个。为了避免代码的冗余和功能的重复，本人在系统完成后期进行了代码重构，将所有查询接口整合到一个查询接口，所有入参被写成一个类，这样就能很好地对接口进行复用，优化代码效率。并且，当查询单一产品的时候用Mybatis和Java进行重构产品索引方法，使得产品搜索索引能在极短时间内进行响应。最终，商品查询的接口方法可以完美兼容任何个数和类型输入参数的查询请求。
4.2.5   登录和注册
像普通系统的设计一样，本系统也拥有注册和登录的界面，注册和登录的合法性判定也和其他系统相类似。但是本系统追求以动态界面吸引刺激用户注册登录使用，所以主要从这两个界面的简约、动态特效来设计。另外，为了大数据展示效果达到最佳，本系统的导航栏也进行了可伸缩滑动设计。
